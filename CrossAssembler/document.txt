1. 開發平台：Win10
2. 使用的開發環境：VScode + extension(C/C++ for Visual Studio Code, version: 1.19.1)
3. 所選擇的組合語言：8086/8088
4. 設計：
[0]結構：
(1) Tables.cpp -> 存放table、hash mod 100、查找
共有7張table，使用"vector<vector<string>> tables;"，實際大小為8但0不放。
--Table number-----store type-------
        1          instruction
        2       pseudo-instruction
        3           register
        4           delimiter
        5        literal(label)
        6        decimal/hexadecimal
        7           string
-------------------------------------

(2) OPcodes.cpp -> 存指令、OPcode與同類項
結構：
struct OPs {
    string instructions; // ex. "AAD"
    string opcodes; // ex. "D5"
    int types; // ex. 1
};
全部用一個vector<OPs>存放

(3) ASM.cpp ->主程式，請run他
正確的code每一行的結構為：
struct Line { // Tokens_and_Coordinates
    vector<string> tokens; // ex. {"MOV", "AH", ",", "4CH"}
    vector<vector<int>> coordinates; // ex. {{1, 109}, {3, 1}, {4, 3}, {6, -1}} // -1是隨便舉個例子
};
tokens存放一行中的所有token，coordinates存放對應的座標；
ex. MOV對應{1, 109}，"1"為token type，即存放的table編號，"109"為hash後的index

[1] 流程：
// pass 1
將四張table讀入並使用hash存進vector
逐行讀入，先對每行切token並分類
再檢查lexical error，有錯誤會印出行數且不會存入錯誤的那一行
----lexical error能做的----
1. hex超過FFFFH的報錯
2. dec超過65535的報錯
3. literal開頭不是A~Z的報錯
---------------------------
檢查完lexical error先存入Line的結構
全部存完再檢查syntax error
----syntax error不能做的----------------------------------------------------------------------------------------------------------
1. 檢查有頭沒尾/有尾沒頭(ex. 有CODE SEGMENT沒有CODE ENDS或反過來、有Mycode PROC NEAR沒有Mycode ENDP或反過來)
2. 檢查每個type 1 instruction、type 2 pseudo-instruction後面接的格式是否合法
3. 檢查計算式、先乘除後加減、有括號沒括號等等複雜的計算
----syntax error能做的------------------------------------------------------------------------------------------------------------
1. 檢查每個type 3 register、type 4 delimiter、type 5 literal(label)、type 6 decimal/hexadecimal、type 7 string後面接的東西是否合法
2. 印出錯誤的行數（注意，印出的是沒有存lexical error的那些）
3. 用一個vector<int>紀錄錯誤的行數，全部檢查完再刪除
p.s. 就是這裡寫太久才做不完ㄏㄏ
----------------------------------------------------------------------------------------------------------------------------------
----------------------------
假設原始程式：
line 1 : lexical error
line 2 : lexical error
line 3 : legal
line 4 : syntax error
line 5 : syntax error
line 6 : legal
則檢查lexical error時會印出
line 1 : lexical error
line 2 : lexical error
檢查syntax error時會印出
line 2 : syntax error
line 3 : syntax error
最後翻譯合法的那兩行
----------------------------
接著進入translate()開始第一輪的翻譯，forward reference先存進vector紀錄出現的行index等資料，等pass 2再填上
指令依照同類項switch case
address都先用decimal紀錄，最後寫檔才轉hex
並且會紀錄distance(與下一道指令的距離，PC是now addr + distance)
// 直接塞opcode(hex)
case 1: AAD, AAM
case 2: AAA ~ XLAT
// PUSH, POP功能類似, 直接塞opcode(hex)
case 3: PUSH
case 4: POP
// 需要看PROC NEAR/FAR, 直接塞opcode(hex)
case 5: RET, RETF
// 抓operand, 直接塞opcode(hex)
case 6: INT
case 7: IN
case 8: OUT
// 來不及做
case 9: JMP
// 看是PROC NEAR/FAR與是否為direct/indirect, 會遇到forward reference
case 10: CALL
// 會遇到forward reference, 直接塞opcode(hex)
// case 11: JA ~ LOOPZ
// 沒做完整, 因為範例很難找
case 12: LDS, LEA, LES
// 來不及做, ESC的範例很難找
case 13: DEC, INC
case 14: ESC
// 開始需要先從binary轉hex了
case 15: DIV ~ NOT
// 很不確定那個v
case 16: RCL ~ SHR
// 一開始卡最久的，沒做完所有的
case 17: XCHG
// 來不及做
case 18: TEST
// 7種format的簡單指令有做完
case 19: MOV
// 來不及做
case 20: ADC ~ XOR

// pass 2
去存forward reference的vector比對存所有label address的vector，如果forward reference的話之前addr先設為-1，現在pass 2再補上
然後一樣switch case，不過只跳我有做且會遇到forward reference的指令：
case 10: CALL
case 11: JA ~ LOOPZ
case 12: LDS, LEA, LES
case 19: MOV
需要注意的是MOV有兩種情況：
1. disp = target addr - pc
2. 直接抓address

最後寫檔，產生的檔案叫做"output.txt"

5. 未完成的功能
(1) 每一道instruction與pseudo-instruction個別的合法format checking
(2)上面提到的
case 9: JMP
case 13: DEC, INC
case 14: ESC
case 18: TEST
case 20: ADC ~ XOR
並且因為前面syntax error沒對每一道指令分別分析legal format，所以這邊如果input我沒做的功能高機率爆炸
有些地方沒做分辨decimal與hex的部分
例如:
123H可以(基本都預設會加H)
1234基本預設是hex，很少去做decimal還是hex的分辨
然後複雜的指令也沒做，例如：
MOV word ptr[BP][DI]+1234H,0
MOV  AX, 1000H[BX][SI*8]
PUSH WORD PTR [BX] (我的PTR後面只有做接label的情況)
[裡面不能放label]
然後公告給的output教授在影片中說2E:是x86自己加的，所以我跑範例input的最後addr會在002E而非0030(input有兩個"2E:"，我沒算進去)